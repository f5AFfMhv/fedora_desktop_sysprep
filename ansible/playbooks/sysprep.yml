- name: Provision Fedora Desktop
  gather_facts: true
  hosts: prd
  roles:
    - prometheus.prometheus.node_exporter
  tasks:
    - name: Add rpm repositories
      ansible.builtin.yum_repository:
        name: "{{ item.name }}"
        description: "{{ item.desc }}"
        baseurl: "{{ item.url }}"
        gpgkey: "{{ item.gpgkey }}"
        file: my_repos
        gpgcheck: true
        enabled: true
      with_items: "{{ rpm_repositories }}"
      tags:
        - repo
        - install

    - name: Update system
      ansible.builtin.dnf:
        name: "*"
        state: latest
      tags:
        - install

    - name: Install rpm packages
      ansible.builtin.dnf:
        name: "{{ rpms }}"
        state: present
      tags:
        - install

    - name: Uninstall unwanted packages
      ansible.builtin.dnf:
        name: "{{ uninstall_rpms }}"
        state: absent
        autoremove: true
      tags:
        - cleanup
        - install

    - name: Add flatpak repositories
      community.general.flatpak_remote:
        name: "{{ item.name }}"
        state: present
        flatpakrepo_url: "{{ item.url }}"
      with_items:
        - "{{ flatpak_repositories }}"
      tags:
        - flatpak
        - install

    - name: Install flatpak packages
      community.general.flatpak:
        name: "{{ flatpaks }}"
        state: present
      tags:
        - flatpak
        - install

    - name: Add ML4W flathub repository and install flatpaks
      ansible.builtin.shell: |
        wget -P /tmp {{ ml4w_flatpak_gpg }}
        flatpak remote-add --if-not-exists ml4w {{ ml4w_flatpak_repo }} \
          --gpg-import=/tmp/ml4w-apps-public-key.asc
        rm -f /tmp/ml4w-apps-public-key.asc
        flatpak install --system --noninteractive ml4w \
          com.ml4w.hyprlandsettings \
          com.ml4w.settings \
          com.ml4w.sidebar
      register: output
      changed_when: output.rc == 0
      tags:
        - flatpak
        - install

    - name: Upgrade pip
      ansible.builtin.pip:
        name:
          - pip
          - setuptools
          - wheel
          - virtualenv
        extra_args: --upgrade
      tags:
        - python
        - install

    - name: Install python packages
      ansible.builtin.pip:
        name: "{{ python_packages }}"
        extra_args: --no-cache-dir
      tags:
        - python
        - install

    - name: Install binaries
      ansible.builtin.get_url:
        url: "{{ item.url }}"
        dest: "/usr/local/bin/{{ item.name }}"
        mode: "0755"
      with_items: "{{ binaries }}"
      tags:
        - install

    - name: Add sudo rules
      community.general.sudoers:
        name: "{{ user }}-sudo-rules"
        state: present
        user: "{{ user }}"
        nopassword: true
        commands: "{{ allow_sudo }}"
      tags:
        - config
        - sudo

    - name: Enable/disable services
      ansible.builtin.service:
        name: "{{ item.name }}"
        state: "{{ item.state }}"
        enabled: "{{ item.enabled }}"
      with_items: "{{ services }}"
      tags:
        - config
        - service

    - name: Create env vars in crontab
      ansible.builtin.cron:
        name: "{{ item.var }}"
        env: true
        user: "{{ user }}"
        job: "{{ item.val }}"
      with_items: "{{ cron_env }}"
      tags:
        - config
        - cron

    - name: Create cron jobs
      ansible.builtin.cron:
        name: "{{ item.name }}"
        special_time: reboot
        user: "{{ user }}"
        job: "{{ item.job }}"
      with_items: "{{ cron_jobs }}"
      tags:
        - config
        - cron

    - name: Sync git repositories
      ansible.builtin.git:
        repo: "{{ item.repo }}"
        dest: "{{ item.dest }}"
        force: true
        key_file: "/home/{{ user }}/.ssh/id_rsa"
        accept_hostkey: true
      with_items: "{{ git_repos }}"
      tags:
        - config
        - git

    - name: Change git directory owner
      ansible.builtin.file:
        path: "{{ git_dir }}"
        state: directory
        owner: "{{ user }}"
        group: "{{ user }}"
        recurse: True
      tags:
        - config
        - git

    - name: Deploy dotfiles
      ansible.builtin.copy:
        src: "{{ dotfiles_dir }}/{{ item }}"
        dest: "{{ home_dir }}/.config"
        owner: "{{ user }}"
        group: "{{ user }}"
        mode: "0751"
        remote_src: true
      with_items: "{{ dotfiles }}"
      tags:
        - config
        - dotfiles

    - name: Create dotfile symbolic links for user
      ansible.builtin.file:
        src: "{{ home_dir }}/.config/{{ item }}"
        dest: "{{ home_dir }}/.{{ item }}"
        owner: "{{ user }}"
        group: "{{ user }}"
        state: link
        force: true
      with_items: "{{ dotfile_symlinks }}"
      tags:
        - config
        - dotfiles

    - name: Create dotfile symbolic links for root
      ansible.builtin.file:
        src: "{{ home_dir }}/.config/{{ item }}"
        dest: "/root/.{{ item }}"
        owner: "{{ user }}"
        group: "{{ user }}"
        state: link
        force: true
      with_items: "{{ dotfile_symlinks }}"
      tags:
        - config
        - dotfiles

    - name: Add DNS configuration
      ansible.builtin.template:
        src: resolv.conf.j2
        dest: /etc/resolv.conf
        owner: root
        group: root
        mode: "0644"
      notify: Restart DNSMasq
      tags:
        - config
        - dns

    - name: Add SDDM configuration
      ansible.builtin.template:
        src: sddm.conf.j2
        dest: /etc/sddm.conf
        owner: root
        group: root
        mode: "0644"
      notify: Restart SDDM
      tags:
        - config
        - sddm

    - name: Add SDDM theme
      ansible.builtin.copy:
        src: "{{ git_dir }}/{{ sddm_theme }}"
        dest: /usr/share/sddm/themes/
        owner: root
        group: root
        mode: "0755"
        remote_src: true
      notify: Restart SDDM
      tags:
        - config
        - sddm

    - name: Create system fonts directory
      ansible.builtin.file:
        path: "/usr/local/share/fonts"
        state: directory
      tags:
        - config
        - fonts

    - name: Find all .ttf files in source directories
      ansible.builtin.find:
        paths: "{{ font_dirs }}"
        patterns: "*.ttf"
        recurse: true
      register: ttf_fonts
      tags:
        - config
        - fonts

    - name: Copy fonts from repos
      ansible.builtin.copy:
        src: "{{ item }}"
        dest: "/usr/local/share/fonts/"
        owner: root
        group: root
        mode: "0644"
        remote_src: true
      with_items: "{{ ttf_fonts.files | map(attribute='path') | list }}"
      notify: Update font cache
      tags:
        - config
        - fonts

    - name: Set zsh as shell for user
      ansible.builtin.user:
        name: "{{ user }}"
        shell: /usr/bin/zsh
      tags:
        - config
        - zsh

  handlers:
    - name: Update font cache
      ansible.builtin.command: fc-cache

    - name: Restart DNSMasq
      ansible.builtin.service:
        name: dnsmasq
        state: restarted

    - name: Restart SDDM
      ansible.builtin.service:
        name: sddm
        state: restarted
